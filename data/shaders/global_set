layout(std140, set=0, binding=0) uniform GlobalUBO {
    mat4 P;
    mat4 V;
};

struct GlobalIlluminationSettings {
    float voxel_resolution; // size of 3d voxel texture
    float voxel_area; // from -1 to 1 would be 2
    float voxel_size; // area / res
    float trace_distance; // [0, res*sqrt(2)]
    float diffuse_cone_aperture;
    float specular_cone_aperture;
    float occlusion_cone_aperture;
    float aoAlpha;
    float aoFalloff;
    float traceShadowHit;
    int merge_voxels_calc_occlusion;
    int lighting_use_merge_voxels_occlusion;
    int lighting_calc_occlusion;
};

layout(std140, set=0, binding=1) uniform GlobalIlluminationSettingsUBO {
    GlobalIlluminationSettings gi_settings;
};

#include "lights"
layout(std140, set=0, binding=2) uniform LightsUBO {
    uint point_light_count;
    uint direction_light_count;
    PointLight point_lights[8];
    DirectionLight direction_lights[8];
};